plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    forgeRuntimeLibrary 'com.moandjiezana.toml:toml4j:0.7.2'
    compileOnly 'com.moandjiezana.toml:toml4j:0.7.2'
    include 'com.moandjiezana.toml:toml4j:0.7.2'

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modApi("infinituum.void_lib:void_lib-neoforge:${rootProject.minecraft_version}-${rootProject.void_lib_version}")
}

processResources {
    String version = rootProject.neoforge_version;
    var base_version = version.substring(0, version.lastIndexOf('.'))

    var rep_properties = [
            "version"              : rootProject.version,
            "loader_version"       : rootProject.neoforge_loader_version,
            "neoforge_base_version": base_version,
            "minecraft_version"    : rootProject.minecraft_version,
            "void_lib_version"     : rootProject.void_lib_version
    ]

    inputs.properties rep_properties

    filesMatching('META-INF/neoforge.mods.toml') {
        expand rep_properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.minecraft_version + "-" + rootProject.mod_version

            pom {
                name = "FastConfigAPI [Forge]"
                description = "A mod that makes creating Configs easy and fast"
                url = "https://github.com/Infinituum17/FastConfigAPI"
                scm {
                    url = "https://github.com/Infinituum17/FastConfigAPI"
                    connection = "scm:git:git://github.com/Infinituum17/FastConfigAPI.git"
                    developerConnection = "scm:git:git@github.com:Infinituum17/FastConfigAPI.git"
                }
                issueManagement {
                    system = "github"
                    url = "https://github.com/Infinituum17/FastConfigAPI/issues"
                }
                licenses {
                    license {
                        name = "Infinituum's License"
                        url = "https://github.com/Infinituum17/FastConfigAPI/blob/main/LICENSE.md"
                    }
                }
                developers {
                    developer {
                        id = "infinituum17"
                        name = "infinituum17"
                    }
                }
            }

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "InfinituumModResources"
            url "file://" + System.getenv("MOD_RESOURCES").toString() + "/maven"
        }
    }
}
